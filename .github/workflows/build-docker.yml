name: Build Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-multiarch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    strategy:
      matrix:
        variant: [root, subpath]
        include:
          - variant: root
            base_url: ""
          - variant: subpath
            base_url: "/viewer"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:buildx-stable-1
        buildkitd-flags: --allow-insecure-entitlement network.host --allow-insecure-entitlement security.insecure

    # No explicit cache actions needed - using BuildKit cache mounts in Dockerfile

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for variant
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/viewer-${{ matrix.variant }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=TART Viewer (${{ matrix.variant }})
          org.opencontainers.image.description=Vue.js frontend with Rust/WASM for TART telescope visualization
          org.opencontainers.image.base-url=${{ matrix.base_url }}
          org.opencontainers.image.variant=${{ matrix.variant }}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          CI_PROJECT_NAME=viewer
          BASE_URL=${{ matrix.base_url }}
          CI_COMMIT_SHA=${{ github.sha }}
        cache-from: |
          type=gha,scope=buildx-${{ matrix.variant }}
          type=gha,scope=buildx-shared
          type=gha,scope=rust-${{ matrix.variant }}
          type=gha,scope=node-${{ matrix.variant }}
        cache-to: |
          type=gha,mode=max,scope=buildx-${{ matrix.variant }}
          type=gha,mode=max,scope=buildx-shared
          type=gha,mode=max,scope=rust-${{ matrix.variant }}
          type=gha,mode=max,scope=node-${{ matrix.variant }}

  pr-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build-multiarch
    permissions:
      pull-requests: write

    steps:
    - name: Add PR summary comment
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;

          const comment = `üê≥ **Docker images built for PR #${prNumber}**

          \`\`\`bash
          docker run -p 8081:80 ghcr.io/tart-telescope/web_app/viewer-root:pr-${prNumber}      # root variant
          docker run -p 8082:80 ghcr.io/tart-telescope/web_app/viewer-subpath:pr-${prNumber}  # /viewer variant
          \`\`\``;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-proxy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build-multiarch

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test proxy service
      run: |
        cd tart-viewer
        docker compose build
        docker compose config
